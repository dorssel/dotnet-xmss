@*
    SPDX-FileCopyrightText: 2024 Frans van Dorsselaer

    SPDX-License-Identifier: MIT
*@

@page "/"
@using Dorssel.Security.Cryptography
@inject Blazored.LocalStorage.ISyncLocalStorageService LocalStorage

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

<FluentButton @onclick="GeneratePublicKey">Generate Key</FluentButton>
<FluentProgress Width="300px" Min="0" Max="100" Value="@ProgressPercentage"></FluentProgress>
<FluentButton Disabled="@DisableCancel" @onclick="Cancel">Cancel</FluentButton>

@code {
    int ProgressPercentage;
    bool DisableCancel = true;
    CancellationTokenSource CancellationTokenSource = new();

    private async Task GeneratePublicKey()
    {
        StateHasChanged();
        {
            using var xmss = new Xmss();
            xmss.GeneratePrivateKey(new LocalStorageStateManager(LocalStorage, @"test"), XmssParameterSet.XMSS_SHA2_10_256, false);
        }
        {
            using var xmss = new Xmss();
            xmss.ImportPrivateKey(new LocalStorageStateManager(LocalStorage, @"test"));
            if (!xmss.HasPublicKey)
            {
                CancellationTokenSource = new();
                DisableCancel = false;
                await xmss.GeneratePublicKeyAsync((percentage) => {
                    ProgressPercentage = (int)percentage;
                    StateHasChanged();
                }, CancellationTokenSource.Token);
            }
        }
    }

    private void Cancel()
    {
        CancellationTokenSource.Cancel();
        DisableCancel = true;
    }
}
